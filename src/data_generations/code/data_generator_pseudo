employee: i=1 to N
day: j=1 to D
shift: k=1 to 4
a and b are the lower bound and upper bound of the number of employees in each shift of a day

F(i) is the list of off days, ending with -1
S[j, k] = candidate set for shift k on the day j, initally S = {1, 2,..., N}
bound[j] = lowerbound and upperbound for the day j

function solution(j, S) {
		for each shift k {
			lowerbound[j] = random(1, N//4)
			upperbound[j] = random(1, N//4) + lowerbound[j]
			bound[j].append(lowerbound[j], upperbound[j])
			for iteration in random(lowerbound[j], upperbound[j]) {
				randomly choose an employee i from S[j]
				S[j] \ {i}
			}
		}
		if nightShift[i, j] == True {
			S[j+1] = S \ {i}  // initially S[j+1] = {1, 2,..., N}
		}
		
		solution(j+1, S)

}


a = min(lowerbound) in bound
b = max(upperbound) in bound




// construct list F
for each day j {
	if nightShift == False {
	// find the employee that did not work that day
	F(i).append(j)
	}
}

// write to a text file